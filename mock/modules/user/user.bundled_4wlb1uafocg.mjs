// mock/_utils.ts
function resultSuccess(result, { message = "success" } = {}) {
  return {
    code: 0 /* SUCCESS */,
    result,
    message,
    type: "success"
  };
}
function resultError(message = "error", { code = 1 /* ERROR */, result = null } = {}) {
  return {
    code,
    result,
    message,
    type: "error"
  };
}

// src/utils/is.ts
var isChinesePhoneNumber = (phoneNumber) => {
  const regex = /^0?(13|14|15|16|17|18|19)[0-9]{9}$/;
  return regex.test(phoneNumber);
};

// mock/modules/user/user.ts
import Mock from "mockjs";
var userList = [
  {
    id: 1,
    username: "airuisi",
    password: "123456",
    mobile: "15811112222",
    nickname: "airuisi",
    setting: {
      locale: "zh-CN"
    }
  },
  {
    id: 2,
    username: "ceshi",
    password: "123456",
    mobile: "15811112223",
    nickname: "ceshi",
    setting: {
      locale: "en"
    }
  },
  {
    id: 3,
    username: "ceshi2",
    password: "123456",
    mobile: "15811112224",
    nickname: "ceshi2",
    setting: {}
  }
];
function searchArray(array, searchValue) {
  for (const subArray of array) {
    if (subArray.mobile === searchValue) {
      return subArray;
    }
  }
  return void 0;
}
var user_default = [
  {
    url: "/api/getVerificationCode",
    method: "post",
    response: ({ body }) => {
      const { mobile } = body || {};
      if (mobile && isChinesePhoneNumber(mobile)) {
        if (searchArray(userList, mobile)) {
          const code = Mock.Random.integer(111111, 999999);
          return resultSuccess(
            {
              code
            },
            {
              message: "\u83B7\u53D6\u9A8C\u8BC1\u7801\u6210\u529F"
            }
          );
        }
        return resultError("\u624B\u673A\u53F7\u7801\u4E0D\u5B58\u5728");
      } else {
        return resultError("\u8BF7\u8F93\u5165\u6B63\u786E\u7684\u624B\u673A\u53F7\u7801");
      }
    }
  },
  {
    url: "/api/login",
    method: "post",
    response: ({ body }) => {
      const { mobile, verification, username, password } = body || {};
      if (mobile && verification) {
      } else
        return resultError("\u8BF7\u8F93\u5165\u6B63\u786E\u7684\u624B\u673A\u53F7\u7801");
      if (username && password) {
      }
      if (mobile && isChinesePhoneNumber(mobile)) {
        if (searchArray(userList, mobile)) {
          const code = Mock.Random.integer(111111, 999999);
          return resultSuccess(
            {
              code
            },
            {
              message: "\u83B7\u53D6\u9A8C\u8BC1\u7801\u6210\u529F"
            }
          );
        }
        return resultError("\u624B\u673A\u53F7\u7801\u4E0D\u5B58\u5728");
      } else {
        return resultError("\u8BF7\u8F93\u5165\u6B63\u786E\u7684\u624B\u673A\u53F7\u7801");
      }
    }
  }
];
export {
  user_default as default
};
//# sourceMappingURL=data:application/json;base64,
